import { LRLanguage, LanguageSupport } from '@codemirror/language';
import { styleTags, tags } from '@lezer/highlight';
import { LRParser } from '@lezer/lr';
import { parser as parser$1 } from '@lezer/javascript';
import { parseMixed } from '@lezer/common';

// This file was generated by lezer-generator. You probably shouldn't edit it.
const parser = /*@__PURE__*/LRParser.deserialize({
  version: 14,
  states: "!^QQOPOOOVOQO'#C^QQOPOOOOOO'#C`'#C`OOOO'#Ca'#CaO_OQO,58xOOOO,58x,58xOOOO-E6^-E6^OOOO-E6_-E6_OOOO1G.d1G.d",
  stateData: "g~OVPO~ORSOWUO~ORSOWXO~O",
  goto: "gUPPVPZaTROQQQORVQQTPRWT",
  nodeNames: "âš  Program JsTag JsText",
  maxTerm: 8,
  skippedNodes: [0],
  repeatNodeCount: 2,
  tokenData: "#W~RVO#oh#o#p!P#p#qh#q#r!{#r;'Sh;'S;=`y<%lOhQmSRQO#qh#r;'Sh;'S;=`y<%lOhQ|P;=`<%lhR!UURQO#oh#o#p!h#p#qh#r;'Sh;'S;=`y<%lOhR!oSVPRQO#qh#r;'Sh;'S;=`y<%lOh~#OP#q#r#R~#WOW~",
  tokenizers: [0, 1],
  topRules: {"Program":[0,1]},
  tokenPrec: 0
});

const jsLanguage = /*@__PURE__*/LRLanguage.define({
    parser: /*@__PURE__*/parser.configure({
        wrap: /*@__PURE__*/parseMixed(node => {
            console.log(node.name);
            return node.name === "JsText" ? { parser: parser$1 } : null;
        }),
        props: [
            /*@__PURE__*/styleTags({
                StartJsTag: tags.paren,
                EndJsTag: tags.paren
            }),
        ]
    })
});
const js = function () {
    return new LanguageSupport(jsLanguage);
};

export { js, jsLanguage, parser };
