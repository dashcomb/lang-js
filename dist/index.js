import { LRLanguage, LanguageSupport } from '@codemirror/language';
import { LRParser } from '@lezer/lr';
import { parser as parser$1 } from '@lezer/javascript';
import { parseMixed } from '@lezer/common';

// This file was generated by lezer-generator. You probably shouldn't edit it.
const parser = /*@__PURE__*/LRParser.deserialize({
  version: 14,
  states: "!^QQOPOOOVOQO'#C^QQOPOOOOOO'#Cb'#CbOOOO'#Cc'#CcO_OQO,58xOOOO,58x,58xOOOO-E6`-E6`OOOO-E6a-E6aOOOO1G.d1G.d",
  stateData: "g~ORPO~OSSOTUO~OSSOTXO~O",
  goto: "iWPPXPPP]cTROQQQORVQQTPRWT",
  nodeNames: "âš  Program JsTag JsStartTag JsText JsStartCloseTag",
  maxTerm: 8,
  skippedNodes: [0],
  repeatNodeCount: 2,
  tokenData: "#W~RVO#oh#o#p!P#p#qh#q#r!{#r;'Sh;'S;=`y<%lOhQmSSQO#qh#r;'Sh;'S;=`y<%lOhQ|P;=`<%lhR!UUSQO#oh#o#p!h#p#qh#r;'Sh;'S;=`y<%lOhR!oSRPSQO#qh#r;'Sh;'S;=`y<%lOh~#OP#q#r#R~#WOT~",
  tokenizers: [0, 1],
  topRules: {"Program":[0,1]},
  tokenPrec: 0
});

const jsLanguage = /*@__PURE__*/LRLanguage.define({
    parser: /*@__PURE__*/parser.configure({
        wrap: /*@__PURE__*/parseMixed(node => {
            console.log(node.name);
            return node.name === "JsText" ? { parser: parser$1 } : null;
        }),
        // props: [
        //   styleTags({
        //     "{{ }}": t.paren
        //   }),
        // ]
    })
});
const js = function () {
    return new LanguageSupport(jsLanguage);
};

export { js, jsLanguage, parser };
